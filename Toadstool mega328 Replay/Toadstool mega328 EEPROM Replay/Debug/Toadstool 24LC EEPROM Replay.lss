
Toadstool 24LC EEPROM Replay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000538  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  000005ac  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a27  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000045f  00000000  00000000  000010db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f6  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000039e  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e5  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  88:	0c 94 9a 02 	jmp	0x534	; 0x534 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <EEPROM_write>:
*
* @return	1 = Success
************************************************************************/

uint8_t EEPROM_write(uint16_t deviceAddress, uint16_t memoryAddress, uint8_t data)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	08 2f       	mov	r16, r24
  9a:	d6 2f       	mov	r29, r22
  9c:	17 2f       	mov	r17, r23
  9e:	c4 2f       	mov	r28, r20
	uint8_t result;
	uint8_t returnResult = 0;
	
	//Send START Condition
	result = I2C_sendStart();
  a0:	0e 94 48 02 	call	0x490	; 0x490 <I2C_sendStart>
	
	//Send the device Address with WRITE
	result = I2C_send(deviceAddress|TW_WRITE);
  a4:	80 2f       	mov	r24, r16
  a6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Send Memory Location Address to write to (High)
	result = I2C_send(memoryAddress >> 8);	//Address High
  aa:	81 2f       	mov	r24, r17
  ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Send Memory Location Address to write to (Low)
	result = I2C_send((uint8_t)memoryAddress);	//Address Low
  b0:	8d 2f       	mov	r24, r29
  b2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Write Data to EEPROM
	result = I2C_send(data);	//Data
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Send STOP Condition
	I2C_sendStop();
  bc:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_sendStop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e3       	ldi	r24, 0x3F	; 63
  c2:	9c e9       	ldi	r25, 0x9C	; 156
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <EEPROM_write+0x34>
  c8:	00 c0       	rjmp	.+0      	; 0xca <EEPROM_write+0x3a>
  ca:	00 00       	nop

	_delay_ms(10);

	returnResult = 1;
	return returnResult;
}
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	08 95       	ret

000000d8 <EEPROM_read>:
*
* @return	The byte read from EEPROM
************************************************************************/

uint8_t EEPROM_read(uint16_t deviceAddress, uint16_t memoryAddress)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	c8 2f       	mov	r28, r24
  e0:	d6 2f       	mov	r29, r22
  e2:	17 2f       	mov	r17, r23
	uint8_t readData = 0;
	uint8_t result;


	//Send START Condition
	result = I2C_sendStart();
  e4:	0e 94 48 02 	call	0x490	; 0x490 <I2C_sendStart>

	//Send the device Address with WRITE - we need to write in order to specify the address to read from
	result = I2C_send(deviceAddress|TW_WRITE);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Send Memory Location Address to read from (High)
	result = I2C_send(memoryAddress >> 8);	//Address High
  ee:	81 2f       	mov	r24, r17
  f0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Send Memory Location Address to read from (Low)
	result = I2C_send((uint8_t)memoryAddress);	//Address Low
  f4:	8d 2f       	mov	r24, r29
  f6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>


	//Send RESTART Condition - now we read from the memory address
	result = I2C_sendStart();
  fa:	0e 94 48 02 	call	0x490	; 0x490 <I2C_sendStart>


	//Send the device Address with READ
	result = I2C_send(deviceAddress|TW_READ);
  fe:	8c 2f       	mov	r24, r28
 100:	81 60       	ori	r24, 0x01	; 1
 102:	0e 94 51 02 	call	0x4a2	; 0x4a2 <I2C_send>

	//Read the data returned by the EEPROM
	readData = I2C_read(0);	//Read Data with NO ACK  (No ACK means we're done reading)
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <I2C_read>
 10c:	c8 2f       	mov	r28, r24

	//Send STOP Condition
	I2C_sendStop();
 10e:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_sendStop>
	
	return readData;
	
}
 112:	8c 2f       	mov	r24, r28
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <configPins>:
* @return	none
************************************************************************/
void configPins(void)
{
		//Configure the pin the LED is connected to
		DDRB |= (1<<PIN_LED);	//Set pin as an output
 11c:	21 9a       	sbi	0x04, 1	; 4
		
		//Configure the pin the SWITCH is connected to
		DDRB &= ~(1<<PIN_SWITCH);	//Set pin as an input
 11e:	20 98       	cbi	0x04, 0	; 4
		PORTB |= (1<<PIN_SWITCH);	//Enable pull-up resistor on pin
 120:	28 9a       	sbi	0x05, 0	; 5
 122:	08 95       	ret

00000124 <flashLED>:
************************************************************************/
void flashLED(void)

{

	PORTB |= (1<<PIN_LED);		//Turn the LED on, by making pin go high
 124:	29 9a       	sbi	0x05, 1	; 5
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	82 e5       	ldi	r24, 0x52	; 82
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <flashLED+0x8>
 134:	00 c0       	rjmp	.+0      	; 0x136 <flashLED+0x12>
 136:	00 00       	nop
	_delay_ms(150);
	PORTB &= ~(1<<PIN_LED);		//Turn the LED off, by making pin go low
 138:	29 98       	cbi	0x05, 1	; 5
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	82 e5       	ldi	r24, 0x52	; 82
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <flashLED+0x1c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <flashLED+0x26>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <configTimer>:
{

	
	//Order of setting registers as per data sheet
	
	TIMSK1 &= ~( (1<<OCIE1A) | (1<<OCIE1B) | (1<<TOIE1) );	//Disable interrupts on timer
 14e:	ef e6       	ldi	r30, 0x6F	; 111
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 7f       	andi	r24, 0xF8	; 248
 156:	80 83       	st	Z, r24
	
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10); //Set to CTC (compare) mode, set prescaler to 1024
 158:	8d e0       	ldi	r24, 0x0D	; 13
 15a:	80 93 81 00 	sts	0x0081, r24
	
	TCCR1A = (0<<WGM11)|(0<<WGM10);		//Set to CTC (compare) mode
 15e:	10 92 80 00 	sts	0x0080, r1
	
	OCR1A = 1563;	// Crystal = 16MHz; Prescaler = 1024; cycles per sec = 15625; Interval = 100ms
 162:	8b e1       	ldi	r24, 0x1B	; 27
 164:	96 e0       	ldi	r25, 0x06	; 6
 166:	90 93 89 00 	sts	0x0089, r25
 16a:	80 93 88 00 	sts	0x0088, r24

	TIMSK1 |= (1<<OCIE1A);	//Enable interrupts on Compare
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <clearMemory>:
* @details	Initialise the EEPROM memory to an 800ms on/off flash pattern
*
* @return	none
************************************************************************/
void clearMemory(void)
{
 176:	cf 93       	push	r28
	
	uint8_t iCount;
	
	currentMemLocation = EEPROM_FIRST_ADDRESS;	//Start at the first memory address
 178:	84 e1       	ldi	r24, 0x14	; 20
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 05 01 	sts	0x0105, r25
 180:	80 93 04 01 	sts	0x0104, r24
	
	//Three flashes to show memory being set
	flashLED();
 184:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 188:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 18c:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	
	//Leave the LED on during initialisation to show it is in progress
	PORTB |= (1<<PIN_LED);
 190:	29 9a       	sbi	0x05, 1	; 5
 192:	c4 e0       	ldi	r28, 0x04	; 4
	//Loop through the number of memory locations used
	//Why did we choose 800ms as an interval?  Because each bit represents 100ms, and 8 bits to a byte, so 8*100ms = 800ms
	for (iCount=0; iCount <= (REPLAY_COUNT/2); iCount++)
	{
		//For the first 800ms, set the EEPROM to 1 (LED is ON)
		EEPROM_write(EEPROM_DEVICE_ADDRESS, currentMemLocation, 0b11111111);
 194:	60 91 04 01 	lds	r22, 0x0104
 198:	70 91 05 01 	lds	r23, 0x0105
 19c:	4f ef       	ldi	r20, 0xFF	; 255
 19e:	86 ea       	ldi	r24, 0xA6	; 166
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
		currentMemLocation++;
 1a6:	80 91 04 01 	lds	r24, 0x0104
 1aa:	90 91 05 01 	lds	r25, 0x0105
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 05 01 	sts	0x0105, r25
 1b4:	80 93 04 01 	sts	0x0104, r24
		
		//For the second 800ms, set the EEPROM to 0 (LED is OFF)
		EEPROM_write(EEPROM_DEVICE_ADDRESS, currentMemLocation, 0b00000000);
 1b8:	60 91 04 01 	lds	r22, 0x0104
 1bc:	70 91 05 01 	lds	r23, 0x0105
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	86 ea       	ldi	r24, 0xA6	; 166
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
		currentMemLocation++;
 1ca:	80 91 04 01 	lds	r24, 0x0104
 1ce:	90 91 05 01 	lds	r25, 0x0105
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 05 01 	sts	0x0105, r25
 1d8:	80 93 04 01 	sts	0x0104, r24
 1dc:	c1 50       	subi	r28, 0x01	; 1
	
	

	//Loop through the number of memory locations used
	//Why did we choose 800ms as an interval?  Because each bit represents 100ms, and 8 bits to a byte, so 8*100ms = 800ms
	for (iCount=0; iCount <= (REPLAY_COUNT/2); iCount++)
 1de:	d1 f6       	brne	.-76     	; 0x194 <clearMemory+0x1e>
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <clearMemory+0x70>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <clearMemory+0x7a>
 1f0:	00 00       	nop
	}
	

	//Turn LED off
	_delay_ms(1000);	//delay for UI reasons only
	PORTB &= ~(1<<PIN_LED);
 1f2:	29 98       	cbi	0x05, 1	; 5
	
	
	//Five flashes to show finished
	flashLED();
 1f4:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 1f8:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 1fc:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 200:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	flashLED();
 204:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
	
	
	//Reset memory location 
	currentMemLocation = EEPROM_FIRST_ADDRESS;
 208:	84 e1       	ldi	r24, 0x14	; 20
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 05 01 	sts	0x0105, r25
 210:	80 93 04 01 	sts	0x0104, r24
	currentMemBit = 8;	//This forces a read as it is outside the allowed range of 0-7
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	80 93 01 01 	sts	0x0101, r24

}
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <replay1Bit>:
************************************************************************/
void replay1Bit(void)
{

	//Have we finished processing all bits for this Memory location's byte?
	if (currentMemBit > 7)	//Yes: So read the next byte
 21e:	80 91 01 01 	lds	r24, 0x0101
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	08 f1       	brcs	.+66     	; 0x268 <replay1Bit+0x4a>
	{
							
		//Read the next byte from the current EEPROM memory location
		LEDValue = EEPROM_read(EEPROM_DEVICE_ADDRESS, currentMemLocation);
 226:	60 91 04 01 	lds	r22, 0x0104
 22a:	70 91 05 01 	lds	r23, 0x0105
 22e:	86 ea       	ldi	r24, 0xA6	; 166
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_read>
 236:	80 93 02 01 	sts	0x0102, r24
							
		//Increment to the next memory location
		currentMemLocation++;
 23a:	80 91 04 01 	lds	r24, 0x0104
 23e:	90 91 05 01 	lds	r25, 0x0105
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 05 01 	sts	0x0105, r25
 248:	80 93 04 01 	sts	0x0104, r24
							
		//If we've been going for more than the REPLAY Sample Count, then start from beginning
		if (currentMemLocation > (REPLAY_COUNT + EEPROM_FIRST_ADDRESS))
 24c:	80 91 04 01 	lds	r24, 0x0104
 250:	90 91 05 01 	lds	r25, 0x0105
 254:	4b 97       	sbiw	r24, 0x1b	; 27
 256:	30 f0       	brcs	.+12     	; 0x264 <replay1Bit+0x46>
		currentMemLocation = EEPROM_FIRST_ADDRESS;
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 05 01 	sts	0x0105, r25
 260:	80 93 04 01 	sts	0x0104, r24
							
		//Start at bit 0 of current byte
		currentMemBit = 0;
 264:	10 92 01 01 	sts	0x0101, r1
							
	}
						
	//Set the LED to current bit
	if ( (LEDValue & (1<<currentMemBit)) == 0)	//If current bit is 0
 268:	80 91 02 01 	lds	r24, 0x0102
 26c:	20 91 01 01 	lds	r18, 0x0101
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <replay1Bit+0x5a>
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	2a 95       	dec	r18
 27a:	e2 f7       	brpl	.-8      	; 0x274 <replay1Bit+0x56>
 27c:	80 fd       	sbrc	r24, 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <replay1Bit+0x66>
	{
		PORTB &= ~(1<<PIN_LED);	//Turn LED off
 280:	29 98       	cbi	0x05, 1	; 5
 282:	01 c0       	rjmp	.+2      	; 0x286 <replay1Bit+0x68>
	}
	else
	{
		PORTB |= (1<<PIN_LED);	//Turn LED on
 284:	29 9a       	sbi	0x05, 1	; 5
	}
						
	//Move onto next bit, for next time the timer interrupt fires
	currentMemBit ++;
 286:	80 91 01 01 	lds	r24, 0x0101
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 01 01 	sts	0x0101, r24
 290:	08 95       	ret

00000292 <record1Bit>:
* @return	none
************************************************************************/
void record1Bit(void)
{
	//If this is the first bit of this memory location, then then set entire byte to zero
	if (currentMemBit == 0)
 292:	80 91 01 01 	lds	r24, 0x0101
 296:	81 11       	cpse	r24, r1
 298:	02 c0       	rjmp	.+4      	; 0x29e <record1Bit+0xc>
		LEDValue = 0;
 29a:	10 92 02 01 	sts	0x0102, r1
					
	//Is the switch pressed?
	if( (PINB & (1<<PIN_SWITCH)) == 0)	//YES:
 29e:	18 99       	sbic	0x03, 0	; 3
 2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <record1Bit+0x34>
	{
		LEDValue |= (1<<currentMemBit);	//Set the value of this bit to a "1" so show switch was on
 2a2:	80 91 01 01 	lds	r24, 0x0101
 2a6:	40 91 02 01 	lds	r20, 0x0102
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <record1Bit+0x24>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <record1Bit+0x20>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	80 93 02 01 	sts	0x0102, r24
		PORTB |= (1<<PIN_LED);			//Turn LED on to give feedback to user
 2c2:	29 9a       	sbi	0x05, 1	; 5
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <record1Bit+0x36>
	}
	else  //NO:
	{
		//No need to set the value of the bit as the byte starts out as zero
		PORTB &= ~(1<<PIN_LED);			//Turn LED off to give feedback to user
 2c6:	29 98       	cbi	0x05, 1	; 5
	}
					
	
	currentMemBit++;	//Move to next bit
 2c8:	80 91 01 01 	lds	r24, 0x0101
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 01 01 	sts	0x0101, r24
					
	//Have we finished recording all bits for this Memory Location?
	if (currentMemBit > 7)	//Yes: So write the full byte
 2d2:	80 91 01 01 	lds	r24, 0x0101
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	f8 f0       	brcs	.+62     	; 0x318 <record1Bit+0x86>
	{
						
		//Write the byte to the current EEPROM memory location
		EEPROM_write(EEPROM_DEVICE_ADDRESS, currentMemLocation, LEDValue);
 2da:	40 91 02 01 	lds	r20, 0x0102
 2de:	60 91 04 01 	lds	r22, 0x0104
 2e2:	70 91 05 01 	lds	r23, 0x0105
 2e6:	86 ea       	ldi	r24, 0xA6	; 166
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_write>
						
		//Increment to the next memory location
		currentMemLocation++;
 2ee:	80 91 04 01 	lds	r24, 0x0104
 2f2:	90 91 05 01 	lds	r25, 0x0105
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 05 01 	sts	0x0105, r25
 2fc:	80 93 04 01 	sts	0x0104, r24
						
		//If we've been going for more than the REPLAY Sample Count, then end the recording
		if (currentMemLocation > (REPLAY_COUNT + EEPROM_FIRST_ADDRESS))
 300:	80 91 04 01 	lds	r24, 0x0104
 304:	90 91 05 01 	lds	r25, 0x0105
 308:	4b 97       	sbiw	r24, 0x1b	; 27
 30a:	20 f0       	brcs	.+8      	; 0x314 <record1Bit+0x82>
		{
			currentState = STATE_STOP_REC;	//Move onto the "Stop Recording" state
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	80 93 00 01 	sts	0x0100, r24
 312:	08 95       	ret
		}
		else
		{
			//Start again at bit 0 of byte
			currentMemBit = 0;
 314:	10 92 01 01 	sts	0x0101, r1
 318:	08 95       	ret

0000031a <main>:


int main(void)
{
    
	configPins();	//Configure the pins for input and output
 31a:	0e 94 8e 00 	call	0x11c	; 0x11c <configPins>
	
	//Turn LED on for 3 secs to indicate initialisation, and allow time to press switch (and enter Memory Init)
	PORTB |= (1<<PIN_LED);
 31e:	29 9a       	sbi	0x05, 1	; 5
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	8b e7       	ldi	r24, 0x7B	; 123
 324:	92 e9       	ldi	r25, 0x92	; 146
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0xc>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x16>
 330:	00 00       	nop
	_delay_ms(3000);
	PORTB &= ~(1<<PIN_LED);
 332:	29 98       	cbi	0x05, 1	; 5

	configTimer();	//Configure Timer to fire every 100ms
 334:	0e 94 a7 00 	call	0x14e	; 0x14e <configTimer>
	
	I2C_init(100);	//Initialise TWI(I2C) communication at 100kHz
 338:	84 e6       	ldi	r24, 0x64	; 100
 33a:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_init>
	

	currentState = STATE_REPLAY;	//Start in the Replay State
 33e:	10 92 00 01 	sts	0x0100, r1
	
	currentMemLocation = EEPROM_FIRST_ADDRESS;	//Start replaying from the first memory location
 342:	84 e1       	ldi	r24, 0x14	; 20
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 05 01 	sts	0x0105, r25
 34a:	80 93 04 01 	sts	0x0104, r24
	currentMemBit = 8;	//This forces a read as it is outside the allowed range of 0-7
 34e:	88 e0       	ldi	r24, 0x08	; 8
 350:	80 93 01 01 	sts	0x0101, r24
	
		
	//Check whether button is pressed - if pressed, then pin will be LOW
	//Holding button down during reset will re-initialise the EEPROM memory
	if ((PINB & (1<<PIN_SWITCH)) == 0)
 354:	18 9b       	sbis	0x03, 0	; 3
	{
		clearMemory();
 356:	0e 94 bb 00 	call	0x176	; 0x176 <clearMemory>
	}
	
	sei();	//Enable Interrupts so Timer interrupts fire
 35a:	78 94       	sei
				
				//STATE: Start the recording
				case STATE_START_REC:	
					//Flash the LED 3 times so we know recording is about to start
					
					TIMSK1 &= ~(1<<OCIE1A);	//Disable interrupts on Timer
 35c:	cf e6       	ldi	r28, 0x6F	; 111
 35e:	d0 e0       	ldi	r29, 0x00	; 0
					flashLED();
					
					TIMSK1 |= (1<<OCIE1A);	//Enable interrupts on Timer
					
					//Reset memory location and bit to first address
					currentMemLocation = EEPROM_FIRST_ADDRESS;
 360:	04 e1       	ldi	r16, 0x14	; 20
 362:	10 e0       	ldi	r17, 0x00	; 0
					currentMemBit = 0;
					
					
					//Set state to recording
					currentState = STATE_RECORDING;
 364:	68 94       	set
 366:	ff 24       	eor	r15, r15
 368:	f1 f8       	bld	r15, 1
				case STATE_REPLAY:
				
					//First check whether button pressed.  If so, need to enter recording state
					if( (PINB & (1<<PIN_SWITCH)) == 0)
					{
						currentState = STATE_START_REC;
 36a:	ee 24       	eor	r14, r14
 36c:	e3 94       	inc	r14
	
	while(1)
    {
        
		//Has the timer interrupt fired?  If so, process
		if (isrFlag == 1)
 36e:	80 91 03 01 	lds	r24, 0x0103
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x54>
		{
			
			isrFlag = 0;	//Reset ISR flag to off
 376:	10 92 03 01 	sts	0x0103, r1
			
			//Decide what to do based on current state
			switch (currentState)
 37a:	80 91 00 01 	lds	r24, 0x0100
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	71 f0       	breq	.+28     	; 0x39e <main+0x84>
 382:	28 f0       	brcs	.+10     	; 0x38e <main+0x74>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	01 f1       	breq	.+64     	; 0x3c8 <main+0xae>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	09 f1       	breq	.+66     	; 0x3ce <main+0xb4>
 38c:	f0 cf       	rjmp	.-32     	; 0x36e <main+0x54>
				
				//STATE: Replaying the recording
				case STATE_REPLAY:
				
					//First check whether button pressed.  If so, need to enter recording state
					if( (PINB & (1<<PIN_SWITCH)) == 0)
 38e:	18 99       	sbic	0x03, 0	; 3
 390:	03 c0       	rjmp	.+6      	; 0x398 <main+0x7e>
					{
						currentState = STATE_START_REC;
 392:	e0 92 00 01 	sts	0x0100, r14
 396:	03 c0       	rjmp	.+6      	; 0x39e <main+0x84>
					}
					
					//Otherwise, replay another bit from the recording (1 bit per 100ms)
					else
					{
						replay1Bit();	
 398:	0e 94 0f 01 	call	0x21e	; 0x21e <replay1Bit>
						break;
 39c:	e8 cf       	rjmp	.-48     	; 0x36e <main+0x54>
				
				//STATE: Start the recording
				case STATE_START_REC:	
					//Flash the LED 3 times so we know recording is about to start
					
					TIMSK1 &= ~(1<<OCIE1A);	//Disable interrupts on Timer
 39e:	88 81       	ld	r24, Y
 3a0:	8d 7f       	andi	r24, 0xFD	; 253
 3a2:	88 83       	st	Y, r24
					
					flashLED();
 3a4:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3a8:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3ac:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					
					TIMSK1 |= (1<<OCIE1A);	//Enable interrupts on Timer
 3b0:	88 81       	ld	r24, Y
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	88 83       	st	Y, r24
					
					//Reset memory location and bit to first address
					currentMemLocation = EEPROM_FIRST_ADDRESS;
 3b6:	10 93 05 01 	sts	0x0105, r17
 3ba:	00 93 04 01 	sts	0x0104, r16
					currentMemBit = 0;
 3be:	10 92 01 01 	sts	0x0101, r1
					
					
					//Set state to recording
					currentState = STATE_RECORDING;
 3c2:	f0 92 00 01 	sts	0x0100, r15
					
					break;
 3c6:	d3 cf       	rjmp	.-90     	; 0x36e <main+0x54>
					
				
				//STATE: Continue recording
				case STATE_RECORDING:	
					//We'll now record and store the value of the button (and therefore LED) every 100ms
					record1Bit();
 3c8:	0e 94 49 01 	call	0x292	; 0x292 <record1Bit>
					break;
 3cc:	d0 cf       	rjmp	.-96     	; 0x36e <main+0x54>
					
				//STATE: Stop the recording
				case STATE_STOP_REC:	
					//Flash the LED 5 times so we know recording is finished
					
					TIMSK1 &= ~(1<<OCIE1A);	//Disable interrupts on Timer
 3ce:	88 81       	ld	r24, Y
 3d0:	8d 7f       	andi	r24, 0xFD	; 253
 3d2:	88 83       	st	Y, r24
					
					flashLED();
 3d4:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3d8:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3dc:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3e0:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					flashLED();
 3e4:	0e 94 92 00 	call	0x124	; 0x124 <flashLED>
					
					TIMSK1 |= (1<<OCIE1A);	//Enable interrupts on Timer
 3e8:	88 81       	ld	r24, Y
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	88 83       	st	Y, r24
					
					//Reset memory location
					currentMemLocation = EEPROM_FIRST_ADDRESS;
 3ee:	10 93 05 01 	sts	0x0105, r17
 3f2:	00 93 04 01 	sts	0x0104, r16
					currentMemBit = 0;
 3f6:	10 92 01 01 	sts	0x0101, r1
					
					currentState = STATE_REPLAY;	//Enter Replay mode
 3fa:	10 92 00 01 	sts	0x0100, r1
 3fe:	b7 cf       	rjmp	.-146    	; 0x36e <main+0x54>

00000400 <__vector_11>:
* @details	Not called from user code.  Called by Timer1 Compare interrupt.
*
* @return	none
************************************************************************/
ISR(TIMER1_COMPA_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24

	//Set the flag to indicate Interrupt has fired
	isrFlag = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 03 01 	sts	0x0103, r24

 412:	8f 91       	pop	r24
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <I2C_init>:
* @param[in]	I2C_kHz	The I2C bus speed in kHz (eg. 100 = 100kHz)
* 
* @return	none
************************************************************************/
void I2C_init(uint8_t I2C_kHz)
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <I2C_init+0x6>
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
	uint8_t bitRate;
	volatile uint16_t I2C_Hz = (unsigned long)I2C_kHz * 1000UL;
 428:	28 ee       	ldi	r18, 0xE8	; 232
 42a:	33 e0       	ldi	r19, 0x03	; 3
 42c:	48 2f       	mov	r20, r24
 42e:	42 9f       	mul	r20, r18
 430:	c0 01       	movw	r24, r0
 432:	43 9f       	mul	r20, r19
 434:	90 0d       	add	r25, r0
 436:	11 24       	eor	r1, r1
 438:	9a 83       	std	Y+2, r25	; 0x02
 43a:	89 83       	std	Y+1, r24	; 0x01
	
	bitRate = (F_CPU / (I2C_Hz * 2 * I2C_PRESCALER)) - (16 / (2 * I2C_PRESCALER) );	//Calculate bit-rate
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	3a 81       	ldd	r19, Y+2	; 0x02
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	74 e2       	ldi	r23, 0x24	; 36
 454:	84 ef       	ldi	r24, 0xF4	; 244
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__udivmodsi4>
 45c:	22 50       	subi	r18, 0x02	; 2
	
	TWSR &= ~((1<<TWPS0)|(1<<TWPS1));		//Clear the pre-scaler
 45e:	e9 eb       	ldi	r30, 0xB9	; 185
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	8c 7f       	andi	r24, 0xFC	; 252
 466:	80 83       	st	Z, r24
	TWSR |= I2C_PRESCALER_BIT;				//Set the new pre-scaler
 468:	80 81       	ld	r24, Z
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	80 83       	st	Z, r24
	
	TWBR = bitRate;	//Set the bit rate
 46e:	20 93 b8 00 	sts	0x00B8, r18
	
}
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <I2C_sendStop>:
*
* @return	none
************************************************************************/
void I2C_sendStop(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN); //Clear the Interrupt Flag, Set Stop bit, Enable TWI
 47c:	84 e9       	ldi	r24, 0x94	; 148
 47e:	80 93 bc 00 	sts	0x00BC, r24
 482:	08 95       	ret

00000484 <I2C_waitComplete>:
* @return	the result of the operation - the TWI Status bits from TWI Status Register
************************************************************************/
void I2C_waitComplete(void)
{
	
	while (!(TWCR & (1<<TWINT)) );	//Wait for the TWINT interrupt flag to be set - indicates transmission complete
 484:	ec eb       	ldi	r30, 0xBC	; 188
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	88 23       	and	r24, r24
 48c:	ec f7       	brge	.-6      	; 0x488 <I2C_waitComplete+0x4>
	
}
 48e:	08 95       	ret

00000490 <I2C_sendStart>:
*
* @return	the result of the operation - the TWI Status bits from TWI Status Register
************************************************************************/
uint8_t I2C_sendStart(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Clear the Interrupt Flag, Set Start bit, Enable TWI
 490:	84 ea       	ldi	r24, 0xA4	; 164
 492:	80 93 bc 00 	sts	0x00BC, r24
	
	I2C_waitComplete();	//Wait for transmission to complete
 496:	0e 94 42 02 	call	0x484	; 0x484 <I2C_waitComplete>
		
	return TW_STATUS;	//Success
 49a:	80 91 b9 00 	lds	r24, 0x00B9
	
}
 49e:	88 7f       	andi	r24, 0xF8	; 248
 4a0:	08 95       	ret

000004a2 <I2C_send>:
*
* @return	the result of the operation - the TWI Status bits from TWI Status Register
************************************************************************/
uint8_t I2C_send(uint8_t Data)
{
	TWDR = Data;	//Set the Data to send
 4a2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);		//Clear interrupt flag and enable TWI
 4a6:	84 e8       	ldi	r24, 0x84	; 132
 4a8:	80 93 bc 00 	sts	0x00BC, r24
	
	I2C_waitComplete();	//Wait for transmit to complete
 4ac:	0e 94 42 02 	call	0x484	; 0x484 <I2C_waitComplete>
	
	return TW_STATUS;	//Return the status
 4b0:	80 91 b9 00 	lds	r24, 0x00B9
	
}
 4b4:	88 7f       	andi	r24, 0xF8	; 248
 4b6:	08 95       	ret

000004b8 <I2C_read>:
* @param[in]	sendAck 1=Send an ACK; any other = do not send ACK
*
* @return	The data read from TWI (0 if an error occurred)
************************************************************************/
uint8_t I2C_read(uint8_t sendAck)
{
 4b8:	cf 93       	push	r28
	uint8_t	ackBit = 0;
	uint8_t statusCheck = TW_MR_DATA_NACK;	//Assume status check has no ACK
	
	if (sendAck == 1)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <I2C_read+0xc>
* @return	The data read from TWI (0 if an error occurred)
************************************************************************/
uint8_t I2C_read(uint8_t sendAck)
{
	uint8_t	ackBit = 0;
	uint8_t statusCheck = TW_MR_DATA_NACK;	//Assume status check has no ACK
 4be:	c8 e5       	ldi	r28, 0x58	; 88
*
* @return	The data read from TWI (0 if an error occurred)
************************************************************************/
uint8_t I2C_read(uint8_t sendAck)
{
	uint8_t	ackBit = 0;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <I2C_read+0x10>
	uint8_t statusCheck = TW_MR_DATA_NACK;	//Assume status check has no ACK
	
	if (sendAck == 1)
	{
		ackBit = (1<<TWEA);	//Send ACK
		statusCheck = TW_MR_DATA_ACK;	//status check has ACK
 4c4:	c0 e5       	ldi	r28, 0x50	; 80
	uint8_t	ackBit = 0;
	uint8_t statusCheck = TW_MR_DATA_NACK;	//Assume status check has no ACK
	
	if (sendAck == 1)
	{
		ackBit = (1<<TWEA);	//Send ACK
 4c6:	80 e4       	ldi	r24, 0x40	; 64
		statusCheck = TW_MR_DATA_ACK;	//status check has ACK
	}


	TWCR = (1<<TWINT) | (1<<TWEN) | ackBit;				//Clear Interrupt, Enable TWI, send ACK if bit is set
 4c8:	84 68       	ori	r24, 0x84	; 132
 4ca:	80 93 bc 00 	sts	0x00BC, r24
	
	I2C_waitComplete();	//Wait for Transmission to complete
 4ce:	0e 94 42 02 	call	0x484	; 0x484 <I2C_waitComplete>
	
	//Check Status
	
	if (TW_STATUS != statusCheck)
 4d2:	20 91 b9 00 	lds	r18, 0x00B9
 4d6:	28 7f       	andi	r18, 0xF8	; 248
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	8c 2f       	mov	r24, r28
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	28 17       	cp	r18, r24
 4e0:	39 07       	cpc	r19, r25
 4e2:	19 f4       	brne	.+6      	; 0x4ea <I2C_read+0x32>
	{
		return 0;	//An Error
	}
	
	//Otherwise return data
	return TWDR;
 4e4:	80 91 bb 00 	lds	r24, 0x00BB
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <I2C_read+0x34>
	
	//Check Status
	
	if (TW_STATUS != statusCheck)
	{
		return 0;	//An Error
 4ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	//Otherwise return data
	return TWDR;
	
}
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <__udivmodsi4>:
 4f0:	a1 e2       	ldi	r26, 0x21	; 33
 4f2:	1a 2e       	mov	r1, r26
 4f4:	aa 1b       	sub	r26, r26
 4f6:	bb 1b       	sub	r27, r27
 4f8:	fd 01       	movw	r30, r26
 4fa:	0d c0       	rjmp	.+26     	; 0x516 <__udivmodsi4_ep>

000004fc <__udivmodsi4_loop>:
 4fc:	aa 1f       	adc	r26, r26
 4fe:	bb 1f       	adc	r27, r27
 500:	ee 1f       	adc	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	a2 17       	cp	r26, r18
 506:	b3 07       	cpc	r27, r19
 508:	e4 07       	cpc	r30, r20
 50a:	f5 07       	cpc	r31, r21
 50c:	20 f0       	brcs	.+8      	; 0x516 <__udivmodsi4_ep>
 50e:	a2 1b       	sub	r26, r18
 510:	b3 0b       	sbc	r27, r19
 512:	e4 0b       	sbc	r30, r20
 514:	f5 0b       	sbc	r31, r21

00000516 <__udivmodsi4_ep>:
 516:	66 1f       	adc	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	1a 94       	dec	r1
 520:	69 f7       	brne	.-38     	; 0x4fc <__udivmodsi4_loop>
 522:	60 95       	com	r22
 524:	70 95       	com	r23
 526:	80 95       	com	r24
 528:	90 95       	com	r25
 52a:	9b 01       	movw	r18, r22
 52c:	ac 01       	movw	r20, r24
 52e:	bd 01       	movw	r22, r26
 530:	cf 01       	movw	r24, r30
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
